Primitive
What are the 7 primitives?
Primitive wrapper
unary
binary
operand
operator
inclusively (ranges that are conslusively)
Nullish coalescing operator
Labels for break/continue
switch syntax
"the function body"
directive
Function Declaration
Function Expression
Anonymous function
automatic semicolon insertion
Arithmetical operators
Assignment operator
Conditional operator
Comparison operator
Chrome debugging: Conditional breakpoints
Chrome debugging: Toggle Console while on Sources tab (Esc)
Chrome debugging: "Resume" hotkey (F8)
Chrome debugging: "Step" hotkey (F9)
Chrome debugging: "Step Over" hotkey (F10)
Chrome debugging: You can pause on exception
Behavior Driven Development (BDD)
Transpiler (Babel)
Literal (Like object literal)
Property value shorthand (objects)
Object.assign
values are called roots (Garbage collection)
Interlinked objects
How do constructor functions work with return
Optional chaining '?.' syntax for function
Optional chaining '?.' syntax for accessing property with brackets []
Symbol type
Object to primitive conversion
How can primitives have methods?
slice vs substring vs substr (slice is 'better')
Data Types
Strucural Types
Structural Root Primitive
contiguous subarray
map((element, index, array)) – creates a new array from results of calling func for every element.
sort(func) – sorts the array in-place, then returns it.
reverse() – reverses the array in-place, then returns it.
split/join – convert a string to array and back.
reduce/reduceRight(func, initial) – calculate a single value over the array by calling func for each element and passing an intermediate result between the calls.
filter(func) - creates a new array where calling func for every element returns truthy
surrogate pairs
Iterables and Symbol.iterator and Array.from